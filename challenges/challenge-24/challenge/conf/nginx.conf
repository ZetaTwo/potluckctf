load_module modules/ngx_http_js_module.so;
load_module modules/ngx_http_xslt_filter_module.so;

user nginx;

worker_processes 10;

events {
  use epoll;
  worker_connections 128;
}


http {
  charset utf-8;
  keepalive_timeout 3;
  include mime.types;

  access_log /dev/stdout combined;
  error_log /dev/stdout debug;
  
  root "/var/www";


  server {
    listen 80;
    server_name _;


    location ~ /download/([^&?=#]+)\.(json|xml) {
      proxy_pass http://unix:/run/download.socket:/$2?id=$1;
    }

    location / {
      xslt_stylesheet /etc/nginx/xsl/index.xsl;
      xslt_string_param request_id $request_id;

      add_header Cache-Control 'no-cache no-store';

      index "index.xml";
      try_files $uri $uri/ =404;
    }

    location ~ "/spaghetti/([0-9a-f]{32})" {
      set $spaghetti_id $1;
      set $spaghetti_name $arg_name;
      set $spaghetti_recipe $arg_recipe;
      set $spaghetti_image $arg_image;

      auth_request /_update_spaghetti;

      xslt_stylesheet /etc/nginx/xsl/index.xsl;
      xslt_string_param spaghetti_id $spaghetti_id;
      proxy_pass http://unix:/run/spaghetti.socket:/$spaghetti_id;
    }

    location = /_update_spaghetti {
      internal;

      proxy_pass_request_body off;
      proxy_set_header Content-Length "";

      proxy_set_header X-Spaghetti-Id $spaghetti_id;
      proxy_set_header X-Spaghetti-Name $spaghetti_name;
      proxy_set_header X-Spaghetti-Recipe $spaghetti_recipe;
      proxy_set_header X-Spaghetti-Image $spaghetti_image;

      proxy_pass http://unix:/run/spaghetti.socket:/update-spaghetti;
    }

  }


  # Download MACHINE
  server {
    listen unix:/run/download.socket;
    root "/tmp";
    include flag.conf;


    js_path "/etc/nginx/njs/";
    js_import js from index.js;


    location /json { 
      add_header Content-Disposition "attachment; filename=recipe.json";
      js_content js.handler;
    }

    location /xml { 
      default_type text/xml;
      add_header Content-Disposition "attachment; filename=recipe.xml";
      try_files /$arg_id =404;
    }

    location /flag {
      return 200 '$flag';
    }
  }

  # SPAGHETTI MACHINE
  server {
    listen unix:/run/spaghetti.socket;
    root "/tmp";
    default_type text/xml;

    location / {}

    location = /update-spaghetti {
      set $spaghetti_id  $http_x_spaghetti_id;
      set $spaghetti_filename  '/tmp/$spaghetti_id';

      set $spaghetti_name  $http_x_spaghetti_name;
      set $spaghetti_recipe  $http_x_spaghetti_recipe;
      set $spaghetti_image  $http_x_spaghetti_image;

      xslt_string_param filename $spaghetti_filename;
      xslt_stylesheet /etc/nginx/xsl/spaghetti.xsl;

      try_files /$spaghetti_id @create-spaghetti;
    }

    location @create-spaghetti {

      xslt_string_param filename $spaghetti_filename;
      xslt_string_param name $spaghetti_name;
      xslt_string_param recipe $spaghetti_recipe;
      xslt_string_param image $spaghetti_image;
      xslt_stylesheet /etc/nginx/xsl/spaghetti.xsl;
      return 200 '<?xml version="1.0"?><new></new>';
    }

  }
}
